To start the supercollider server use
scsynth -u 57711

this starts supercollider with the udp port 57711
udp port 57711 seems to be default ued for supercollider

To load a synth def file
(server-snd "/d_load" "/home/joseph/src/clj/osc-tst/synths/sc/synthSin.scsyndef")

To create a synth
(server-snd "/s_new" "synthSin" 1000 0 1)

To stop a synth immediately
(server-snd "/n_run" 1000 0)

To Free the synth/node
(server-snd "/n_free" 1000)

==================================================================
SuperCollider

to write a synthdef to a synthdef file
(
SynthDef.new("synthSin", { |out|
    var outArray;
    outArray = [SinOsc.ar(440, 0, 0.2), SinOsc.ar(442, 0, 0.2)];
    Out.ar(out, outArray)
}).writeDefFile("/home/joseph/src/clj/osc-tst/synths/");
)


==================================================================
osc-tst Sample Session

After starting scsynth and connecting it to pipewire

In the osc-tst directory:

> clj
user=> (use 'osc-tst.core)
nil
user=> (ns osc-tst.core)
osc-tst.core=>(event-debug-on)    ;; To print events sent FROM server to console
osc-tst.core=>(osc-debug true)    ;; to turn on osc-clj debugging
osc-tst.core=> (connect)
....
--> Connection established
nil
osc-tst.core=> (server-snd "/dumpOSC" 1)    ;; print osc messages from supercollider server

osc-tst.core=> (server-snd "/g_new" 1 0 0)    ;; set up default group
osc-tst.core=> (server-snd "/d_load" (synth-file "gong"))
osc-tst.core=> (server-snd "/s_new" "gong" 1000 0 1)
osc-tst.core=> (server-snd "/n_set" 1000 "gate" 0.0)
osc-tst.core=> (server-snd "/n_set" 1000 "gate" 1.0)
osc-tst.core=> (server-snd "/n_free" 1000)
osc-tst.core=> (event-debug-off)   ;; STOP printing events to console

==================================================================
BUNDLES


xxx (in-osc-bundle mypeer (osc-now) (osc-send mypeer "/g_new" 1 0 0) (osc-send mypeer "/d_load" (synth-file "gong")))
xxx (in-osc-bundle mypeer (osc-now) (osc-send mypeer "/d_load" (synth-file "gong")) (osc-send mypeer "/s_new" "gong" 1000 0 1))
(in-osc-bundle mypeer (osc-now) (osc-send mypeer "/d_load" "/home/joseph/src/clj/osc-tst/synths/sc/gong.scsyndef") (osc-send mypeer "/s_new" "gong" 2010 0 1))

This works
(def mypeer (overtone.osc.peer/client-peer "localhost" 57711))
(osc-send-bundle mypeer (osc-bundle (osc-now) (osc-msg "/g_new" (Integer. 1) (Integer. 0) (Integer. 0))))

(osc-send-bundle mypeer (osc-bundle (osc-now) (osc-msg "/g_new" (Integer. 1) (Integer. 0) (Integer. 0)) (osc-msg "/d_load" "/home/joseph/src/clj/osc-tst/synths/sc/gong.scsyndef")))
(osc-send-bundle mypeer (osc-bundle (osc-now) (osc-msg "/s_new" "gong" (Integer. 1002) (Integer. 0) (Integer. 1)) ))
==================================================================

OSC

OSC docs
https://opensoundcontrol.stanford.edu/spec-1_0.html

Supercollider OSC command reference
http://doc.sccode.org/Reference/Server-Command-Reference.html


SonicPi synth doc
https://github.com/sonic-pi-net/sonic-pi/blob/710107fe22c5977b9fa5e83b71e30f847610e240/SYNTH_DESIGN.md


==================================================================
